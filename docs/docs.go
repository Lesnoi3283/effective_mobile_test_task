// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/lyrics": {
            "get": {
                "description": "Retrieves the requested couplet number from the specified song.",
                "produces": [
                    "text/plain"
                ],
                "summary": "Returns a specific couplet from a song's lyrics",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Song ID",
                        "name": "song_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Couplet Number",
                        "name": "couplet_num",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Couplet text",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "204": {
                        "description": "Requested couplet number is bigger than the number of couplets"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Song not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/song": {
            "put": {
                "description": "Updates current song by id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "summary": "Updates the song",
                "parameters": [
                    {
                        "description": "JSON song data",
                        "name": "song",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.Song"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "description": "Creates new song, asks different service for an additional data (release date, text and link).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Creates new song",
                "parameters": [
                    {
                        "description": "JSON song data",
                        "name": "song",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/httphandlers.SongMessage"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Song ID",
                        "schema": {
                            "$ref": "#/definitions/entities.IDMessage"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "delete": {
                "description": "Deletes current song by id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "summary": "Deletes the song",
                "parameters": [
                    {
                        "description": "JSON song ID",
                        "name": "song",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.IDMessage"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/songs": {
            "post": {
                "description": "filtration and pagination are supported",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Returns list of songs",
                "parameters": [
                    {
                        "description": "Filter params",
                        "name": "filter",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/httphandlers.FilterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Songs list",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/httphandlers.FilterRequest"
                            }
                        }
                    },
                    "204": {
                        "description": "No songs found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        }
    },
    "definitions": {
        "entities.IDMessage": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "entities.Song": {
            "type": "object",
            "properties": {
                "group": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "link": {
                    "type": "string"
                },
                "release_date": {
                    "type": "string"
                },
                "song": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "httphandlers.FilterRequest": {
            "type": "object",
            "properties": {
                "filter": {
                    "$ref": "#/definitions/entities.Song"
                },
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                }
            }
        },
        "httphandlers.SongMessage": {
            "type": "object",
            "properties": {
                "group": {
                    "type": "string"
                },
                "song": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
